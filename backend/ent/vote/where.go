// Code generated by ent, DO NOT EDIT.

package vote

import (
	"polling-app/backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldID, id))
}

// Option applies equality check predicate on the "option" field. It's identical to OptionEQ.
func Option(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldOption, v))
}

// OptionEQ applies the EQ predicate on the "option" field.
func OptionEQ(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldOption, v))
}

// OptionNEQ applies the NEQ predicate on the "option" field.
func OptionNEQ(v string) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldOption, v))
}

// OptionIn applies the In predicate on the "option" field.
func OptionIn(vs ...string) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldOption, vs...))
}

// OptionNotIn applies the NotIn predicate on the "option" field.
func OptionNotIn(vs ...string) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldOption, vs...))
}

// OptionGT applies the GT predicate on the "option" field.
func OptionGT(v string) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldOption, v))
}

// OptionGTE applies the GTE predicate on the "option" field.
func OptionGTE(v string) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldOption, v))
}

// OptionLT applies the LT predicate on the "option" field.
func OptionLT(v string) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldOption, v))
}

// OptionLTE applies the LTE predicate on the "option" field.
func OptionLTE(v string) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldOption, v))
}

// OptionContains applies the Contains predicate on the "option" field.
func OptionContains(v string) predicate.Vote {
	return predicate.Vote(sql.FieldContains(FieldOption, v))
}

// OptionHasPrefix applies the HasPrefix predicate on the "option" field.
func OptionHasPrefix(v string) predicate.Vote {
	return predicate.Vote(sql.FieldHasPrefix(FieldOption, v))
}

// OptionHasSuffix applies the HasSuffix predicate on the "option" field.
func OptionHasSuffix(v string) predicate.Vote {
	return predicate.Vote(sql.FieldHasSuffix(FieldOption, v))
}

// OptionEqualFold applies the EqualFold predicate on the "option" field.
func OptionEqualFold(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEqualFold(FieldOption, v))
}

// OptionContainsFold applies the ContainsFold predicate on the "option" field.
func OptionContainsFold(v string) predicate.Vote {
	return predicate.Vote(sql.FieldContainsFold(FieldOption, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPoll applies the HasEdge predicate on the "poll" edge.
func HasPoll() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPollWith applies the HasEdge predicate on the "poll" edge with a given conditions (other predicates).
func HasPollWith(preds ...predicate.Poll) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.NotPredicates(p))
}
