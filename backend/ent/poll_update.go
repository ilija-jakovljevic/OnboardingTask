// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"polling-app/backend/ent/poll"
	"polling-app/backend/ent/predicate"
	"polling-app/backend/ent/user"
	"polling-app/backend/ent/vote"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PollUpdate is the builder for updating Poll entities.
type PollUpdate struct {
	config
	hooks    []Hook
	mutation *PollMutation
}

// Where appends a list predicates to the PollUpdate builder.
func (pu *PollUpdate) Where(ps ...predicate.Poll) *PollUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetQuestion sets the "question" field.
func (pu *PollUpdate) SetQuestion(s string) *PollUpdate {
	pu.mutation.SetQuestion(s)
	return pu
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (pu *PollUpdate) SetNillableQuestion(s *string) *PollUpdate {
	if s != nil {
		pu.SetQuestion(*s)
	}
	return pu
}

// SetOptions sets the "options" field.
func (pu *PollUpdate) SetOptions(s []string) *PollUpdate {
	pu.mutation.SetOptions(s)
	return pu
}

// AppendOptions appends s to the "options" field.
func (pu *PollUpdate) AppendOptions(s []string) *PollUpdate {
	pu.mutation.AppendOptions(s)
	return pu
}

// SetVotenums sets the "votenums" field.
func (pu *PollUpdate) SetVotenums(m map[string]int) *PollUpdate {
	pu.mutation.SetVotenums(m)
	return pu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (pu *PollUpdate) SetCreatorID(id int) *PollUpdate {
	pu.mutation.SetCreatorID(id)
	return pu
}

// SetCreator sets the "creator" edge to the User entity.
func (pu *PollUpdate) SetCreator(u *User) *PollUpdate {
	return pu.SetCreatorID(u.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pu *PollUpdate) AddVoteIDs(ids ...int) *PollUpdate {
	pu.mutation.AddVoteIDs(ids...)
	return pu
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pu *PollUpdate) AddVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVoteIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (pu *PollUpdate) Mutation() *PollMutation {
	return pu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (pu *PollUpdate) ClearCreator() *PollUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (pu *PollUpdate) ClearVotes() *PollUpdate {
	pu.mutation.ClearVotes()
	return pu
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (pu *PollUpdate) RemoveVoteIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveVoteIDs(ids...)
	return pu
}

// RemoveVotes removes "votes" edges to Vote entities.
func (pu *PollUpdate) RemoveVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PollUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PollUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PollUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PollUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PollUpdate) check() error {
	if pu.mutation.CreatorCleared() && len(pu.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Poll.creator"`)
	}
	return nil
}

func (pu *PollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Question(); ok {
		_spec.SetField(poll.FieldQuestion, field.TypeString, value)
	}
	if value, ok := pu.mutation.Options(); ok {
		_spec.SetField(poll.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, poll.FieldOptions, value)
		})
	}
	if value, ok := pu.mutation.Votenums(); ok {
		_spec.SetField(poll.FieldVotenums, field.TypeJSON, value)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVotesIDs(); len(nodes) > 0 && !pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PollUpdateOne is the builder for updating a single Poll entity.
type PollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollMutation
}

// SetQuestion sets the "question" field.
func (puo *PollUpdateOne) SetQuestion(s string) *PollUpdateOne {
	puo.mutation.SetQuestion(s)
	return puo
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableQuestion(s *string) *PollUpdateOne {
	if s != nil {
		puo.SetQuestion(*s)
	}
	return puo
}

// SetOptions sets the "options" field.
func (puo *PollUpdateOne) SetOptions(s []string) *PollUpdateOne {
	puo.mutation.SetOptions(s)
	return puo
}

// AppendOptions appends s to the "options" field.
func (puo *PollUpdateOne) AppendOptions(s []string) *PollUpdateOne {
	puo.mutation.AppendOptions(s)
	return puo
}

// SetVotenums sets the "votenums" field.
func (puo *PollUpdateOne) SetVotenums(m map[string]int) *PollUpdateOne {
	puo.mutation.SetVotenums(m)
	return puo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (puo *PollUpdateOne) SetCreatorID(id int) *PollUpdateOne {
	puo.mutation.SetCreatorID(id)
	return puo
}

// SetCreator sets the "creator" edge to the User entity.
func (puo *PollUpdateOne) SetCreator(u *User) *PollUpdateOne {
	return puo.SetCreatorID(u.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (puo *PollUpdateOne) AddVoteIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddVoteIDs(ids...)
	return puo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (puo *PollUpdateOne) AddVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVoteIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (puo *PollUpdateOne) Mutation() *PollMutation {
	return puo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (puo *PollUpdateOne) ClearCreator() *PollUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (puo *PollUpdateOne) ClearVotes() *PollUpdateOne {
	puo.mutation.ClearVotes()
	return puo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (puo *PollUpdateOne) RemoveVoteIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveVoteIDs(ids...)
	return puo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (puo *PollUpdateOne) RemoveVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the PollUpdate builder.
func (puo *PollUpdateOne) Where(ps ...predicate.Poll) *PollUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PollUpdateOne) Select(field string, fields ...string) *PollUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poll entity.
func (puo *PollUpdateOne) Save(ctx context.Context) (*Poll, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PollUpdateOne) SaveX(ctx context.Context) *Poll {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PollUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PollUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PollUpdateOne) check() error {
	if puo.mutation.CreatorCleared() && len(puo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Poll.creator"`)
	}
	return nil
}

func (puo *PollUpdateOne) sqlSave(ctx context.Context) (_node *Poll, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poll.FieldID)
		for _, f := range fields {
			if !poll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Question(); ok {
		_spec.SetField(poll.FieldQuestion, field.TypeString, value)
	}
	if value, ok := puo.mutation.Options(); ok {
		_spec.SetField(poll.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, poll.FieldOptions, value)
		})
	}
	if value, ok := puo.mutation.Votenums(); ok {
		_spec.SetField(poll.FieldVotenums, field.TypeJSON, value)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Poll{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
