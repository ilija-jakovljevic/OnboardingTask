// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"polling-app/backend/ent/poll"
	"polling-app/backend/ent/predicate"
	"polling-app/backend/ent/user"
	"polling-app/backend/ent/vote"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoll = "Poll"
	TypeUser = "User"
	TypeVote = "Vote"
)

// PollMutation represents an operation that mutates the Poll nodes in the graph.
type PollMutation struct {
	config
	op             Op
	typ            string
	id             *int
	question       *string
	options        *[]string
	appendoptions  []string
	votenums       *map[string]int
	clearedFields  map[string]struct{}
	creator        *int
	clearedcreator bool
	votes          map[int]struct{}
	removedvotes   map[int]struct{}
	clearedvotes   bool
	done           bool
	oldValue       func(context.Context) (*Poll, error)
	predicates     []predicate.Poll
}

var _ ent.Mutation = (*PollMutation)(nil)

// pollOption allows management of the mutation configuration using functional options.
type pollOption func(*PollMutation)

// newPollMutation creates new mutation for the Poll entity.
func newPollMutation(c config, op Op, opts ...pollOption) *PollMutation {
	m := &PollMutation{
		config:        c,
		op:            op,
		typ:           TypePoll,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPollID sets the ID field of the mutation.
func withPollID(id int) pollOption {
	return func(m *PollMutation) {
		var (
			err   error
			once  sync.Once
			value *Poll
		)
		m.oldValue = func(ctx context.Context) (*Poll, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poll.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoll sets the old Poll of the mutation.
func withPoll(node *Poll) pollOption {
	return func(m *PollMutation) {
		m.oldValue = func(context.Context) (*Poll, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PollMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PollMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PollMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PollMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Poll.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuestion sets the "question" field.
func (m *PollMutation) SetQuestion(s string) {
	m.question = &s
}

// Question returns the value of the "question" field in the mutation.
func (m *PollMutation) Question() (r string, exists bool) {
	v := m.question
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestion returns the old "question" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldQuestion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestion: %w", err)
	}
	return oldValue.Question, nil
}

// ResetQuestion resets all changes to the "question" field.
func (m *PollMutation) ResetQuestion() {
	m.question = nil
}

// SetOptions sets the "options" field.
func (m *PollMutation) SetOptions(s []string) {
	m.options = &s
	m.appendoptions = nil
}

// Options returns the value of the "options" field in the mutation.
func (m *PollMutation) Options() (r []string, exists bool) {
	v := m.options
	if v == nil {
		return
	}
	return *v, true
}

// OldOptions returns the old "options" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldOptions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptions: %w", err)
	}
	return oldValue.Options, nil
}

// AppendOptions adds s to the "options" field.
func (m *PollMutation) AppendOptions(s []string) {
	m.appendoptions = append(m.appendoptions, s...)
}

// AppendedOptions returns the list of values that were appended to the "options" field in this mutation.
func (m *PollMutation) AppendedOptions() ([]string, bool) {
	if len(m.appendoptions) == 0 {
		return nil, false
	}
	return m.appendoptions, true
}

// ResetOptions resets all changes to the "options" field.
func (m *PollMutation) ResetOptions() {
	m.options = nil
	m.appendoptions = nil
}

// SetVotenums sets the "votenums" field.
func (m *PollMutation) SetVotenums(value map[string]int) {
	m.votenums = &value
}

// Votenums returns the value of the "votenums" field in the mutation.
func (m *PollMutation) Votenums() (r map[string]int, exists bool) {
	v := m.votenums
	if v == nil {
		return
	}
	return *v, true
}

// OldVotenums returns the old "votenums" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldVotenums(ctx context.Context) (v map[string]int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotenums is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotenums requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotenums: %w", err)
	}
	return oldValue.Votenums, nil
}

// ResetVotenums resets all changes to the "votenums" field.
func (m *PollMutation) ResetVotenums() {
	m.votenums = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *PollMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *PollMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *PollMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *PollMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *PollMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *PollMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// AddVoteIDs adds the "votes" edge to the Vote entity by ids.
func (m *PollMutation) AddVoteIDs(ids ...int) {
	if m.votes == nil {
		m.votes = make(map[int]struct{})
	}
	for i := range ids {
		m.votes[ids[i]] = struct{}{}
	}
}

// ClearVotes clears the "votes" edge to the Vote entity.
func (m *PollMutation) ClearVotes() {
	m.clearedvotes = true
}

// VotesCleared reports if the "votes" edge to the Vote entity was cleared.
func (m *PollMutation) VotesCleared() bool {
	return m.clearedvotes
}

// RemoveVoteIDs removes the "votes" edge to the Vote entity by IDs.
func (m *PollMutation) RemoveVoteIDs(ids ...int) {
	if m.removedvotes == nil {
		m.removedvotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.votes, ids[i])
		m.removedvotes[ids[i]] = struct{}{}
	}
}

// RemovedVotes returns the removed IDs of the "votes" edge to the Vote entity.
func (m *PollMutation) RemovedVotesIDs() (ids []int) {
	for id := range m.removedvotes {
		ids = append(ids, id)
	}
	return
}

// VotesIDs returns the "votes" edge IDs in the mutation.
func (m *PollMutation) VotesIDs() (ids []int) {
	for id := range m.votes {
		ids = append(ids, id)
	}
	return
}

// ResetVotes resets all changes to the "votes" edge.
func (m *PollMutation) ResetVotes() {
	m.votes = nil
	m.clearedvotes = false
	m.removedvotes = nil
}

// Where appends a list predicates to the PollMutation builder.
func (m *PollMutation) Where(ps ...predicate.Poll) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PollMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PollMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Poll, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PollMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PollMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Poll).
func (m *PollMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PollMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.question != nil {
		fields = append(fields, poll.FieldQuestion)
	}
	if m.options != nil {
		fields = append(fields, poll.FieldOptions)
	}
	if m.votenums != nil {
		fields = append(fields, poll.FieldVotenums)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PollMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poll.FieldQuestion:
		return m.Question()
	case poll.FieldOptions:
		return m.Options()
	case poll.FieldVotenums:
		return m.Votenums()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PollMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poll.FieldQuestion:
		return m.OldQuestion(ctx)
	case poll.FieldOptions:
		return m.OldOptions(ctx)
	case poll.FieldVotenums:
		return m.OldVotenums(ctx)
	}
	return nil, fmt.Errorf("unknown Poll field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poll.FieldQuestion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestion(v)
		return nil
	case poll.FieldOptions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptions(v)
		return nil
	case poll.FieldVotenums:
		v, ok := value.(map[string]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotenums(v)
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PollMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PollMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Poll numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PollMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PollMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PollMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Poll nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PollMutation) ResetField(name string) error {
	switch name {
	case poll.FieldQuestion:
		m.ResetQuestion()
		return nil
	case poll.FieldOptions:
		m.ResetOptions()
		return nil
	case poll.FieldVotenums:
		m.ResetVotenums()
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PollMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.creator != nil {
		edges = append(edges, poll.EdgeCreator)
	}
	if m.votes != nil {
		edges = append(edges, poll.EdgeVotes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PollMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	case poll.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.votes))
		for id := range m.votes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PollMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvotes != nil {
		edges = append(edges, poll.EdgeVotes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PollMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.removedvotes))
		for id := range m.removedvotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PollMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcreator {
		edges = append(edges, poll.EdgeCreator)
	}
	if m.clearedvotes {
		edges = append(edges, poll.EdgeVotes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PollMutation) EdgeCleared(name string) bool {
	switch name {
	case poll.EdgeCreator:
		return m.clearedcreator
	case poll.EdgeVotes:
		return m.clearedvotes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PollMutation) ClearEdge(name string) error {
	switch name {
	case poll.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Poll unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PollMutation) ResetEdge(name string) error {
	switch name {
	case poll.EdgeCreator:
		m.ResetCreator()
		return nil
	case poll.EdgeVotes:
		m.ResetVotes()
		return nil
	}
	return fmt.Errorf("unknown Poll edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	clearedFields map[string]struct{}
	polls         map[int]struct{}
	removedpolls  map[int]struct{}
	clearedpolls  bool
	votes         map[int]struct{}
	removedvotes  map[int]struct{}
	clearedvotes  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddPollIDs adds the "polls" edge to the Poll entity by ids.
func (m *UserMutation) AddPollIDs(ids ...int) {
	if m.polls == nil {
		m.polls = make(map[int]struct{})
	}
	for i := range ids {
		m.polls[ids[i]] = struct{}{}
	}
}

// ClearPolls clears the "polls" edge to the Poll entity.
func (m *UserMutation) ClearPolls() {
	m.clearedpolls = true
}

// PollsCleared reports if the "polls" edge to the Poll entity was cleared.
func (m *UserMutation) PollsCleared() bool {
	return m.clearedpolls
}

// RemovePollIDs removes the "polls" edge to the Poll entity by IDs.
func (m *UserMutation) RemovePollIDs(ids ...int) {
	if m.removedpolls == nil {
		m.removedpolls = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.polls, ids[i])
		m.removedpolls[ids[i]] = struct{}{}
	}
}

// RemovedPolls returns the removed IDs of the "polls" edge to the Poll entity.
func (m *UserMutation) RemovedPollsIDs() (ids []int) {
	for id := range m.removedpolls {
		ids = append(ids, id)
	}
	return
}

// PollsIDs returns the "polls" edge IDs in the mutation.
func (m *UserMutation) PollsIDs() (ids []int) {
	for id := range m.polls {
		ids = append(ids, id)
	}
	return
}

// ResetPolls resets all changes to the "polls" edge.
func (m *UserMutation) ResetPolls() {
	m.polls = nil
	m.clearedpolls = false
	m.removedpolls = nil
}

// AddVoteIDs adds the "votes" edge to the Vote entity by ids.
func (m *UserMutation) AddVoteIDs(ids ...int) {
	if m.votes == nil {
		m.votes = make(map[int]struct{})
	}
	for i := range ids {
		m.votes[ids[i]] = struct{}{}
	}
}

// ClearVotes clears the "votes" edge to the Vote entity.
func (m *UserMutation) ClearVotes() {
	m.clearedvotes = true
}

// VotesCleared reports if the "votes" edge to the Vote entity was cleared.
func (m *UserMutation) VotesCleared() bool {
	return m.clearedvotes
}

// RemoveVoteIDs removes the "votes" edge to the Vote entity by IDs.
func (m *UserMutation) RemoveVoteIDs(ids ...int) {
	if m.removedvotes == nil {
		m.removedvotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.votes, ids[i])
		m.removedvotes[ids[i]] = struct{}{}
	}
}

// RemovedVotes returns the removed IDs of the "votes" edge to the Vote entity.
func (m *UserMutation) RemovedVotesIDs() (ids []int) {
	for id := range m.removedvotes {
		ids = append(ids, id)
	}
	return
}

// VotesIDs returns the "votes" edge IDs in the mutation.
func (m *UserMutation) VotesIDs() (ids []int) {
	for id := range m.votes {
		ids = append(ids, id)
	}
	return
}

// ResetVotes resets all changes to the "votes" edge.
func (m *UserMutation) ResetVotes() {
	m.votes = nil
	m.clearedvotes = false
	m.removedvotes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.polls != nil {
		edges = append(edges, user.EdgePolls)
	}
	if m.votes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePolls:
		ids := make([]ent.Value, 0, len(m.polls))
		for id := range m.polls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.votes))
		for id := range m.votes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpolls != nil {
		edges = append(edges, user.EdgePolls)
	}
	if m.removedvotes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePolls:
		ids := make([]ent.Value, 0, len(m.removedpolls))
		for id := range m.removedpolls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.removedvotes))
		for id := range m.removedvotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpolls {
		edges = append(edges, user.EdgePolls)
	}
	if m.clearedvotes {
		edges = append(edges, user.EdgeVotes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePolls:
		return m.clearedpolls
	case user.EdgeVotes:
		return m.clearedvotes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePolls:
		m.ResetPolls()
		return nil
	case user.EdgeVotes:
		m.ResetVotes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VoteMutation represents an operation that mutates the Vote nodes in the graph.
type VoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	option        *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	poll          *int
	clearedpoll   bool
	done          bool
	oldValue      func(context.Context) (*Vote, error)
	predicates    []predicate.Vote
}

var _ ent.Mutation = (*VoteMutation)(nil)

// voteOption allows management of the mutation configuration using functional options.
type voteOption func(*VoteMutation)

// newVoteMutation creates new mutation for the Vote entity.
func newVoteMutation(c config, op Op, opts ...voteOption) *VoteMutation {
	m := &VoteMutation{
		config:        c,
		op:            op,
		typ:           TypeVote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoteID sets the ID field of the mutation.
func withVoteID(id int) voteOption {
	return func(m *VoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Vote
		)
		m.oldValue = func(ctx context.Context) (*Vote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVote sets the old Vote of the mutation.
func withVote(node *Vote) voteOption {
	return func(m *VoteMutation) {
		m.oldValue = func(context.Context) (*Vote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOption sets the "option" field.
func (m *VoteMutation) SetOption(s string) {
	m.option = &s
}

// Option returns the value of the "option" field in the mutation.
func (m *VoteMutation) Option() (r string, exists bool) {
	v := m.option
	if v == nil {
		return
	}
	return *v, true
}

// OldOption returns the old "option" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldOption(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOption: %w", err)
	}
	return oldValue.Option, nil
}

// ResetOption resets all changes to the "option" field.
func (m *VoteMutation) ResetOption() {
	m.option = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *VoteMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *VoteMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *VoteMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *VoteMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *VoteMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *VoteMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *VoteMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *VoteMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *VoteMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *VoteMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *VoteMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *VoteMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the VoteMutation builder.
func (m *VoteMutation) Where(ps ...predicate.Vote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vote).
func (m *VoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.option != nil {
		fields = append(fields, vote.FieldOption)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vote.FieldOption:
		return m.Option()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vote.FieldOption:
		return m.OldOption(ctx)
	}
	return nil, fmt.Errorf("unknown Vote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vote.FieldOption:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOption(v)
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoteMutation) ResetField(name string) error {
	switch name {
	case vote.FieldOption:
		m.ResetOption()
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, vote.EdgeUser)
	}
	if m.poll != nil {
		edges = append(edges, vote.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vote.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case vote.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, vote.EdgeUser)
	}
	if m.clearedpoll {
		edges = append(edges, vote.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoteMutation) EdgeCleared(name string) bool {
	switch name {
	case vote.EdgeUser:
		return m.cleareduser
	case vote.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoteMutation) ClearEdge(name string) error {
	switch name {
	case vote.EdgeUser:
		m.ClearUser()
		return nil
	case vote.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown Vote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoteMutation) ResetEdge(name string) error {
	switch name {
	case vote.EdgeUser:
		m.ResetUser()
		return nil
	case vote.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown Vote edge %s", name)
}
