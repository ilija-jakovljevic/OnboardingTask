// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"polling-app/backend/ent/poll"
	"polling-app/backend/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Poll is the model entity for the Poll schema.
type Poll struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Question holds the value of the "question" field.
	Question string `json:"question,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
	// Votenums holds the value of the "votenums" field.
	Votenums map[string]int `json:"votenums,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PollQuery when eager-loading is set.
	Edges        PollEdges `json:"edges"`
	user_polls   *int
	selectValues sql.SelectValues
}

// PollEdges holds the relations/edges for other nodes in the graph.
type PollEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Votes holds the value of the votes edge.
	Votes []*Vote `json:"votes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PollEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// VotesOrErr returns the Votes value or an error if the edge
// was not loaded in eager-loading.
func (e PollEdges) VotesOrErr() ([]*Vote, error) {
	if e.loadedTypes[1] {
		return e.Votes, nil
	}
	return nil, &NotLoadedError{edge: "votes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poll) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poll.FieldOptions, poll.FieldVotenums:
			values[i] = new([]byte)
		case poll.FieldID:
			values[i] = new(sql.NullInt64)
		case poll.FieldQuestion:
			values[i] = new(sql.NullString)
		case poll.ForeignKeys[0]: // user_polls
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poll fields.
func (po *Poll) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poll.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case poll.FieldQuestion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question", values[i])
			} else if value.Valid {
				po.Question = value.String
			}
		case poll.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case poll.FieldVotenums:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field votenums", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Votenums); err != nil {
					return fmt.Errorf("unmarshal field votenums: %w", err)
				}
			}
		case poll.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_polls", value)
			} else if value.Valid {
				po.user_polls = new(int)
				*po.user_polls = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Poll.
// This includes values selected through modifiers, order, etc.
func (po *Poll) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Poll entity.
func (po *Poll) QueryCreator() *UserQuery {
	return NewPollClient(po.config).QueryCreator(po)
}

// QueryVotes queries the "votes" edge of the Poll entity.
func (po *Poll) QueryVotes() *VoteQuery {
	return NewPollClient(po.config).QueryVotes(po)
}

// Update returns a builder for updating this Poll.
// Note that you need to call Poll.Unwrap() before calling this method if this Poll
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Poll) Update() *PollUpdateOne {
	return NewPollClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Poll entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Poll) Unwrap() *Poll {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poll is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Poll) String() string {
	var builder strings.Builder
	builder.WriteString("Poll(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("question=")
	builder.WriteString(po.Question)
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", po.Options))
	builder.WriteString(", ")
	builder.WriteString("votenums=")
	builder.WriteString(fmt.Sprintf("%v", po.Votenums))
	builder.WriteByte(')')
	return builder.String()
}

// Polls is a parsable slice of Poll.
type Polls []*Poll
